const fs = require('fs');
const path = require('path');
const parser = require('@babel/parser');
const generator = require('@babel/generator').default;


// Рекурсивная функция для удаления свойств loc, start и end из AST
function removeLoc(node) {
  if (typeof node !== 'object' || node === null) {
    return;
  }

  delete node.loc;
  delete node.start;
  delete node.end;
  delete node.extra

  for (const key in node) {
    if (node.hasOwnProperty(key)) {
      removeLoc(node[key]);
    }
  }
}

function parseFile(filePath) {
  const code = fs.readFileSync(filePath, 'utf8');
  const ast = parser.parse(code, {
    sourceType: 'module',
    plugins: [
      'jsx',
      'typescript',
      'classProperties',
      'decorators-legacy',
    ],
    ranges: false,
    tokens: false,
    loc: false,
    comments: false,
  });
  return ast;
}

function parseDirectory(directory) {
  const astTrees = [];
  const files = fs.readdirSync(directory);

  files.forEach(file => {
    const filePath = path.join(directory, file);
    if (fs.lstatSync(filePath).isDirectory()) {
      astTrees.push(...parseDirectory(filePath));
    } else if (filePath.endsWith('.js') || filePath.endsWith('.ts') || filePath.endsWith('.tsx')) {
      console.log(`Parsing file: ${filePath}`);
      const ast = parseFile(filePath);
      removeLoc(ast);
      astTrees.push({
        file: filePath,
        ast,
      });
    }
  });

  return astTrees;
}

const rootDirectory = 'tar';
const astTreeArray = parseDirectory(rootDirectory);

// Генерация кода для каждого AST и объединение его в один файл
let combinedCode = '';
astTreeArray.forEach(item => {
  const generatedCode = generator(item.ast, {}).code;
  combinedCode += `// File: ${item.file}\n${generatedCode}\n`;
});

fs.writeFileSync('combinedCode.js', combinedCode);

// Запись AST в файл
const astTreeJson = JSON.stringify(astTreeArray, null, 2);
fs.writeFileSync('astTree.json', astTreeJson);



function findShellScripts(directory, fileList = []) {
  const files = fs.readdirSync(directory);

  files.forEach(file => {
    const filePath = path.join(directory, file);
    if (fs.lstatSync(filePath).isDirectory()) {
      findShellScripts(filePath, fileList);
    } else if (filePath.endsWith('.sh')) {
      fileList.push(filePath);
    }
  });

  return fileList;
}

// Функция для чтения и объединения содержимого файлов
function concatenateShellScripts(fileList) {
  let combinedContent = '';

  fileList.forEach(file => {
    const fileContent = fs.readFileSync(file, 'utf8');
    const filteredContent = fileContent
      .split('\n')
      .filter(line => !line.startsWith('#!'))
      .join('\n');
    combinedContent += filteredContent + '\n';
  });
  
  return combinedContent;
}

const shellScripts = findShellScripts(rootDirectory);

const concatenated = concatenateShellScripts(shellScripts);

console.log(concatenated);